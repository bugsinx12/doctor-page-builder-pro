
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Supabase project URL and anonymous key
// Use environment variables for configuration
export const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://isjjzddntanbjopqylic.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlzamp6ZGRudGFuYmpvcHF5bGljIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1NzEyMDAsImV4cCI6MjA2MDE0NzIwMH0._Y8ux53LbbT5aAVAyHJduvMGvHuBmKD34fU6xktyjR8";

// Create a Supabase client for anonymous access
// This client will be used when users are not authenticated
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  },
  global: {
    headers: {
      'x-application-name': 'doctor-landing-pages',
    },
  },
});

// Create an authenticated client using a Clerk JWT token
export function getAuthenticatedClient(token: string) {
  return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    global: {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    },
    auth: {
      persistSession: false,
    },
  });
}

// Test Clerk TPA authentication with Supabase
export async function testClerkTPAAuthentication(token: string) {
  try {
    const client = getAuthenticatedClient(token);
    
    // Try to access a protected resource using direct fetch (avoiding .url issues)
    const response = await fetch(`${SUPABASE_URL}/rest/v1/profiles?select=id&limit=1`, {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      console.error("TPA authentication error:", response.statusText);
      return { success: false, error: new Error(response.statusText), message: response.statusText };
    }
    
    const data = await response.json();
    return { success: true, data, message: "Authentication successful" };
  } catch (error) {
    console.error("TPA authentication error:", error);
    return { 
      success: false, 
      error, 
      message: error instanceof Error ? error.message : "Unknown authentication error" 
    };
  }
}
