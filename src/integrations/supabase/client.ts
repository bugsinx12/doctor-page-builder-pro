
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://isjjzddntanbjopqylic.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlzamp6ZGRudGFuYmpvcHF5bGljIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1NzEyMDAsImV4cCI6MjA2MDE0NzIwMH0._Y8ux53LbbT5aAVAyHJduvMGvHuBmKD34fU6xktyjR8";
const JWT_SECRET = "supabase_jwt_7X9z2K#mQ5$pL3@fN6!wR8*tJ4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Disable detecting tokens in URL for Clerk integration
    flowType: 'pkce',
    debug: process.env.NODE_ENV === 'development', // Only enable debug mode in development
  },
  global: {
    headers: {
      'x-client-info': 'supabase-js/2.49.4' // Client info header
    }
  }
});

// Helper function to get current session
export const getSessionStatus = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error getting session:", error);
      return { hasSession: false, error };
    }
    return { hasSession: !!data.session, session: data.session };
  } catch (error) {
    console.error("Unexpected error checking session:", error);
    return { hasSession: false, error };
  }
};

// Helper function to verify if authentication is working correctly
export const verifyAuthentication = async (token: string) => {
  try {
    console.log("Starting authentication verification with token");
    
    // First try to set the session with the token
    const { error: sessionError } = await supabase.auth.setSession({
      access_token: token,
      refresh_token: token,
    });
    
    if (sessionError) {
      console.error("Session error:", sessionError);
      return { 
        success: false, 
        error: sessionError,
        message: "Failed to set authentication session. Please check your JWT template configuration."
      };
    }
    
    // Then verify the session by getting user data
    const { data: userData, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error("User error:", userError);
      return {
        success: false,
        error: userError,
        message: "Failed to verify authentication. Please check your JWT template configuration."
      };
    }
    
    if (!userData.user) {
      return {
        success: false,
        error: new Error("No user data returned"),
        message: "Authentication failed. No user data was returned."
      };
    }
    
    console.log("Authentication verification successful:", userData.user);
    return { success: true, user: userData.user };
  } catch (error) {
    console.error("Verification error:", error);
    return {
      success: false,
      error,
      message: "An unexpected error occurred during authentication verification."
    };
  }
};
